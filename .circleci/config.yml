version: 2.1

# Define the jobs for the pipeline
jobs:
  build:
    # Define the environment for the job
    docker:
      - image: cimg/node:current  # Use a Node.js image (adjust this if you're using a different language or framework)
    steps:
      - checkout  # Checkout the code from your repository
      - run:
          name: "Install dependencies"
          command: npm install  # Install dependencies for your Node.js app

  test:
    docker:
      - image: cimg/node:current  # Use the same Node.js Docker image
    steps:
      - checkout  # Checkout the code again
      - run:
          name: "Run unit tests"
          command: npm test  # Run the unit tests (assuming you have a test script defined in package.json)

  docker-build:
    docker:
      - image: cimg/python:current  # Use a Python Docker image (adjust this if needed for your language stack)
    steps:
      - checkout  # Checkout the code
      - setup_remote_docker:  # Setup remote Docker to build and push Docker images
          version: '20.10.7'  # Specify Docker version
          docker_layer_caching: true  # Enable caching for Docker layers to speed up builds
      - run:
          name: "Login to Docker Hub"
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin  # Docker login
      - run:
          name: "Build Docker image"
          command: docker build -t kaysan98/invoicer:latest .  # Build the Docker image
      - run:
          name: "Push Docker image to Docker Hub"
          command: docker push kaysan98/invoicer:latest  # Push the image to Docker Hub

# Orchestrate the jobs using a workflow
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build  # Run the build job first
      - test:
          requires:
            - build  # Run tests only after the build job completes successfully
      - docker-build:
          requires:
            - test  # Build and push Docker image after tests pass
